datafusion.dataframe_formatter
==============================

.. py:module:: datafusion.dataframe_formatter

.. autoapi-nested-parse::

   HTML formatting utilities for DataFusion DataFrames.



Classes
-------

.. autoapisummary::

   datafusion.dataframe_formatter.CellFormatter
   datafusion.dataframe_formatter.DataFrameHtmlFormatter
   datafusion.dataframe_formatter.DefaultStyleProvider
   datafusion.dataframe_formatter.FormatterManager
   datafusion.dataframe_formatter.StyleProvider


Functions
---------

.. autoapisummary::

   datafusion.dataframe_formatter._refresh_formatter_reference
   datafusion.dataframe_formatter._validate_bool
   datafusion.dataframe_formatter._validate_positive_int
   datafusion.dataframe_formatter.configure_formatter
   datafusion.dataframe_formatter.get_formatter
   datafusion.dataframe_formatter.reset_formatter
   datafusion.dataframe_formatter.reset_styles_loaded_state
   datafusion.dataframe_formatter.set_formatter


Module Contents
---------------

.. py:class:: CellFormatter

   Bases: :py:obj:`Protocol`


   Protocol for cell value formatters.


   .. py:method:: __call__(value: Any) -> str

      Format a cell value to string representation.



.. py:class:: DataFrameHtmlFormatter(max_cell_length: int = 25, max_width: int = 1000, max_height: int = 300, max_memory_bytes: int = 2 * 1024 * 1024, min_rows_display: int = 20, repr_rows: int = 10, enable_cell_expansion: bool = True, custom_css: Optional[str] = None, show_truncation_message: bool = True, style_provider: Optional[StyleProvider] = None, use_shared_styles: bool = True)

   Configurable HTML formatter for DataFusion DataFrames.

   This class handles the HTML rendering of DataFrames for display in
   Jupyter notebooks and other rich display contexts.

   This class supports extension through composition. Key extension points:
   - Provide a custom StyleProvider for styling cells and headers
   - Register custom formatters for specific types
   - Provide custom cell builders for specialized cell rendering

   :param max_cell_length: Maximum characters to display in a cell before truncation
   :param max_width: Maximum width of the HTML table in pixels
   :param max_height: Maximum height of the HTML table in pixels
   :param max_memory_bytes: Maximum memory in bytes for rendered data (default: 2MB)
   :param min_rows_display: Minimum number of rows to display
   :param repr_rows: Default number of rows to display in repr output
   :param enable_cell_expansion: Whether to add expand/collapse buttons for long cell
                                 values
   :param custom_css: Additional CSS to include in the HTML output
   :param show_truncation_message: Whether to display a message when data is truncated
   :param style_provider: Custom provider for cell and header styles
   :param use_shared_styles: Whether to load styles and scripts only once per notebook
                             session

   Initialize the HTML formatter.

   :param max_cell_length: Maximum length of cell content before truncation.
   :type max_cell_length: int, default 25
   :param max_width: Maximum width of the displayed table in pixels.
   :type max_width: int, default 1000
   :param max_height: Maximum height of the displayed table in pixels.
   :type max_height: int, default 300
   :param max_memory_bytes: Maximum memory in bytes for rendered data.
   :type max_memory_bytes: int, default 2097152 (2MB)
   :param min_rows_display: Minimum number of rows to display.
   :type min_rows_display: int, default 20
   :param repr_rows: Default number of rows to display in repr output.
   :type repr_rows: int, default 10
   :param enable_cell_expansion: Whether to allow cells to expand when clicked.
   :type enable_cell_expansion: bool, default True
   :param custom_css: Custom CSS to apply to the HTML table.
   :type custom_css: str, optional
   :param show_truncation_message: Whether to show a message indicating that content has been truncated.
   :type show_truncation_message: bool, default True
   :param style_provider: Provider of CSS styles for the HTML table. If None, DefaultStyleProvider
                          is used.
   :type style_provider: StyleProvider, optional
   :param use_shared_styles: Whether to use shared styles across multiple tables.
   :type use_shared_styles: bool, default True
   :param Raises:
   :param ------:
   :param ValueError: If max_cell_length, max_width, max_height, max_memory_bytes,
                      min_rows_display, or repr_rows is not a positive integer.
   :param TypeError: If enable_cell_expansion, show_truncation_message, or use_shared_styles is
                     not a boolean,
                     or if custom_css is provided but is not a string,
                     or if style_provider is provided but does not implement the StyleProvider
                     protocol.


   .. py:method:: _build_expandable_cell(formatted_value: str, row_count: int, col_idx: int, table_uuid: str) -> str

      Build an expandable cell for long content.



   .. py:method:: _build_html_footer(has_more: bool) -> list[str]

      Build the HTML footer with JavaScript and messages.



   .. py:method:: _build_html_header() -> list[str]

      Build the HTML header with CSS styles.



   .. py:method:: _build_regular_cell(formatted_value: str) -> str

      Build a regular table cell.



   .. py:method:: _build_table_body(batches: list, table_uuid: str) -> list[str]

      Build the HTML table body with data rows.



   .. py:method:: _build_table_container_start() -> list[str]

      Build the opening tags for the table container.



   .. py:method:: _build_table_header(schema: Any) -> list[str]

      Build the HTML table header with column names.



   .. py:method:: _format_cell_value(value: Any) -> str

      Format a cell value for display.

      Uses registered type formatters if available.

      :param value: The cell value to format

      :returns: Formatted cell value as string



   .. py:method:: _get_cell_value(column: Any, row_idx: int) -> Any

      Extract a cell value from a column.

      :param column: Arrow array
      :param row_idx: Row index

      :returns: The raw cell value



   .. py:method:: _get_default_css() -> str

      Get default CSS styles for the HTML table.



   .. py:method:: _get_javascript() -> str

      Get JavaScript code for interactive elements.



   .. py:method:: format_html(batches: list, schema: Any, has_more: bool = False, table_uuid: str | None = None) -> str

      Format record batches as HTML.

      This method is used by DataFrame's _repr_html_ implementation and can be
      called directly when custom HTML rendering is needed.

      :param batches: List of Arrow RecordBatch objects
      :param schema: Arrow Schema object
      :param has_more: Whether there are more batches not shown
      :param table_uuid: Unique ID for the table, used for JavaScript interactions

      :returns: HTML string representation of the data

      :raises TypeError: If schema is invalid and no batches are provided



   .. py:method:: format_str(batches: list, schema: Any, has_more: bool = False, table_uuid: str | None = None) -> str

      Format record batches as a string.

      This method is used by DataFrame's __repr__ implementation and can be
      called directly when string rendering is needed.

      :param batches: List of Arrow RecordBatch objects
      :param schema: Arrow Schema object
      :param has_more: Whether there are more batches not shown
      :param table_uuid: Unique ID for the table, used for JavaScript interactions

      :returns: String representation of the data

      :raises TypeError: If schema is invalid and no batches are provided



   .. py:method:: is_styles_loaded() -> bool
      :classmethod:


      Check if HTML styles have been loaded in the current session.

      This method is primarily intended for debugging UI rendering issues
      related to style loading.

      :returns: True if styles have been loaded, False otherwise

      .. rubric:: Example

      >>> from datafusion.dataframe_formatter import DataFrameHtmlFormatter
      >>> DataFrameHtmlFormatter.is_styles_loaded()
      False



   .. py:method:: register_formatter(type_class: type, formatter: CellFormatter) -> None

      Register a custom formatter for a specific data type.

      :param type_class: The type to register a formatter for
      :param formatter: Function that takes a value of the given type and returns
                        a formatted string



   .. py:method:: set_custom_cell_builder(builder: Callable[[Any, int, int, str], str]) -> None

      Set a custom cell builder function.

      :param builder: Function that takes (value, row, col, table_id) and returns HTML



   .. py:method:: set_custom_header_builder(builder: Callable[[Any], str]) -> None

      Set a custom header builder function.

      :param builder: Function that takes a field and returns HTML



   .. py:attribute:: _custom_cell_builder
      :type:  Optional[Callable[[Any, int, int, str], str]]
      :value: None



   .. py:attribute:: _custom_header_builder
      :type:  Optional[Callable[[Any], str]]
      :value: None



   .. py:attribute:: _styles_loaded
      :value: False



   .. py:attribute:: _type_formatters
      :type:  dict[type, CellFormatter]


   .. py:attribute:: custom_css
      :value: None



   .. py:attribute:: enable_cell_expansion
      :value: True



   .. py:attribute:: max_cell_length
      :value: 25



   .. py:attribute:: max_height
      :value: 300



   .. py:attribute:: max_memory_bytes
      :value: 2097152



   .. py:attribute:: max_width
      :value: 1000



   .. py:attribute:: min_rows_display
      :value: 20



   .. py:attribute:: repr_rows
      :value: 10



   .. py:attribute:: show_truncation_message
      :value: True



   .. py:attribute:: style_provider


   .. py:attribute:: use_shared_styles
      :value: True



.. py:class:: DefaultStyleProvider

   Default implementation of StyleProvider.


   .. py:method:: get_cell_style() -> str

      Get the CSS style for table cells.

      :returns: CSS style string



   .. py:method:: get_header_style() -> str

      Get the CSS style for header cells.

      :returns: CSS style string



.. py:class:: FormatterManager

   Manager class for the global DataFrame HTML formatter instance.


   .. py:method:: get_formatter() -> DataFrameHtmlFormatter
      :classmethod:


      Get the current global DataFrame HTML formatter.

      :returns: The global HTML formatter instance



   .. py:method:: set_formatter(formatter: DataFrameHtmlFormatter) -> None
      :classmethod:


      Set the global DataFrame HTML formatter.

      :param formatter: The formatter instance to use globally



   .. py:attribute:: _default_formatter
      :type:  DataFrameHtmlFormatter


.. py:class:: StyleProvider

   Bases: :py:obj:`Protocol`


   Protocol for HTML style providers.


   .. py:method:: get_cell_style() -> str

      Get the CSS style for table cells.



   .. py:method:: get_header_style() -> str

      Get the CSS style for header cells.



.. py:function:: _refresh_formatter_reference() -> None

   Refresh formatter reference in any modules using it.

   This helps ensure that changes to the formatter are reflected in existing
   DataFrames that might be caching the formatter reference.


.. py:function:: _validate_bool(value: Any, param_name: str) -> None

   Validate that a parameter is a boolean.

   :param value: The value to validate
   :param param_name: Name of the parameter (used in error message)

   :raises TypeError: If the value is not a boolean


.. py:function:: _validate_positive_int(value: Any, param_name: str) -> None

   Validate that a parameter is a positive integer.

   :param value: The value to validate
   :param param_name: Name of the parameter (used in error message)

   :raises ValueError: If the value is not a positive integer


.. py:function:: configure_formatter(**kwargs: Any) -> None

   Configure the global DataFrame HTML formatter.

   This function creates a new formatter with the provided configuration
   and sets it as the global formatter for all DataFrames.

   :param \*\*kwargs: Formatter configuration parameters like max_cell_length,
                      max_width, max_height, enable_cell_expansion, etc.

   :raises ValueError: If any invalid parameters are provided

   .. rubric:: Example

   >>> from datafusion.html_formatter import configure_formatter
   >>> configure_formatter(
   ...     max_cell_length=50,
   ...     max_height=500,
   ...     enable_cell_expansion=True,
   ...     use_shared_styles=True
   ... )


.. py:function:: get_formatter() -> DataFrameHtmlFormatter

   Get the current global DataFrame HTML formatter.

   This function is used by the DataFrame._repr_html_ implementation to access
   the shared formatter instance. It can also be used directly when custom
   HTML rendering is needed.

   :returns: The global HTML formatter instance

   .. rubric:: Example

   >>> from datafusion.html_formatter import get_formatter
   >>> formatter = get_formatter()
   >>> formatter.max_cell_length = 50  # Increase cell length


.. py:function:: reset_formatter() -> None

   Reset the global DataFrame HTML formatter to default settings.

   This function creates a new formatter with default configuration
   and sets it as the global formatter for all DataFrames.

   .. rubric:: Example

   >>> from datafusion.html_formatter import reset_formatter
   >>> reset_formatter()  # Reset formatter to default settings


.. py:function:: reset_styles_loaded_state() -> None

   Reset the styles loaded state to force reloading of styles.

   This can be useful when switching between notebook sessions or
   when styles need to be refreshed.

   .. rubric:: Example

   >>> from datafusion.html_formatter import reset_styles_loaded_state
   >>> reset_styles_loaded_state()  # Force styles to reload in next render


.. py:function:: set_formatter(formatter: DataFrameHtmlFormatter) -> None

   Set the global DataFrame HTML formatter.

   :param formatter: The formatter instance to use globally

   .. rubric:: Example

   >>> from datafusion.html_formatter import get_formatter, set_formatter
   >>> custom_formatter = DataFrameHtmlFormatter(max_cell_length=100)
   >>> set_formatter(custom_formatter)


