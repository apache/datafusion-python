datafusion.catalog
==================

.. py:module:: datafusion.catalog

.. autoapi-nested-parse::

   Data catalog providers.



Classes
-------

.. autoapisummary::

   datafusion.catalog.Catalog
   datafusion.catalog.CatalogProvider
   datafusion.catalog.Schema
   datafusion.catalog.SchemaProvider
   datafusion.catalog.Table


Module Contents
---------------

.. py:class:: Catalog(catalog: datafusion._internal.catalog.RawCatalog)

   DataFusion data catalog.

   This constructor is not typically called by the end user.


   .. py:method:: __repr__() -> str

      Print a string representation of the catalog.



   .. py:method:: database(name: str = 'public') -> Schema

      Returns the database with the given ``name`` from this catalog.



   .. py:method:: deregister_schema(name: str, cascade: bool = True) -> Schema | None

      Deregister a schema from this catalog.



   .. py:method:: memory_catalog() -> Catalog
      :staticmethod:


      Create an in-memory catalog provider.



   .. py:method:: names() -> set[str]

      This is an alias for `schema_names`.



   .. py:method:: register_schema(name: str, schema: Schema | SchemaProvider | SchemaProviderExportable) -> Schema | None

      Register a schema with this catalog.



   .. py:method:: schema(name: str = 'public') -> Schema

      Returns the database with the given ``name`` from this catalog.



   .. py:method:: schema_names() -> set[str]

      Returns the list of schemas in this catalog.



   .. py:attribute:: catalog


.. py:class:: CatalogProvider

   Bases: :py:obj:`abc.ABC`


   Abstract class for defining a Python based Catalog Provider.


   .. py:method:: deregister_schema(name: str, cascade: bool) -> None

      Remove a schema from this catalog.

      This method is optional. If your catalog provides a fixed list of schemas, you
      do not need to implement this method.

      :param name: The name of the schema to remove.
      :param cascade: If true, deregister the tables within the schema.



   .. py:method:: register_schema(name: str, schema: SchemaProviderExportable | SchemaProvider | Schema) -> None

      Add a schema to this catalog.

      This method is optional. If your catalog provides a fixed list of schemas, you
      do not need to implement this method.



   .. py:method:: schema(name: str) -> Schema | None
      :abstractmethod:


      Retrieve a specific schema from this catalog.



   .. py:method:: schema_names() -> set[str]
      :abstractmethod:


      Set of the names of all schemas in this catalog.



.. py:class:: Schema(schema: datafusion._internal.catalog.RawSchema)

   DataFusion Schema.

   This constructor is not typically called by the end user.


   .. py:method:: __repr__() -> str

      Print a string representation of the schema.



   .. py:method:: deregister_table(name: str) -> None

      Deregister a table provider from this schema.



   .. py:method:: memory_schema() -> Schema
      :staticmethod:


      Create an in-memory schema provider.



   .. py:method:: names() -> set[str]

      This is an alias for `table_names`.



   .. py:method:: register_table(name: str, table: Table | datafusion.context.TableProviderExportable | datafusion.DataFrame | pyarrow.dataset.Dataset) -> None

      Register a table in this schema.



   .. py:method:: table(name: str) -> Table

      Return the table with the given ``name`` from this schema.



   .. py:method:: table_names() -> set[str]

      Returns the list of all tables in this schema.



   .. py:attribute:: _raw_schema


.. py:class:: SchemaProvider

   Bases: :py:obj:`abc.ABC`


   Abstract class for defining a Python based Schema Provider.


   .. py:method:: deregister_table(name: str, cascade: bool) -> None

      Remove a table from this schema.

      This method is optional. If your schema provides a fixed list of tables, you do
      not need to implement this method.



   .. py:method:: owner_name() -> str | None

      Returns the owner of the schema.

      This is an optional method. The default return is None.



   .. py:method:: register_table(name: str, table: Table | datafusion.context.TableProviderExportable | Any) -> None

      Add a table to this schema.

      This method is optional. If your schema provides a fixed list of tables, you do
      not need to implement this method.



   .. py:method:: table(name: str) -> Table | None
      :abstractmethod:


      Retrieve a specific table from this schema.



   .. py:method:: table_exist(name: str) -> bool
      :abstractmethod:


      Returns true if the table exists in this schema.



   .. py:method:: table_names() -> set[str]
      :abstractmethod:


      Set of the names of all tables in this schema.



.. py:class:: Table(table: Table | datafusion.context.TableProviderExportable | datafusion.DataFrame | pyarrow.dataset.Dataset)

   A DataFusion table.

   Internally we currently support the following types of tables:

   - Tables created using built-in DataFusion methods, such as
     reading from CSV or Parquet
   - pyarrow datasets
   - DataFusion DataFrames, which will be converted into a view
   - Externally provided tables implemented with the FFI PyCapsule
     interface (advanced)

   Constructor.


   .. py:method:: __repr__() -> str

      Print a string representation of the table.



   .. py:method:: from_dataset(dataset: pyarrow.dataset.Dataset) -> Table
      :staticmethod:


      Turn a :mod:`pyarrow.dataset` ``Dataset`` into a :class:`Table`.



   .. py:attribute:: __slots__
      :value: ('_inner',)



   .. py:attribute:: _inner


   .. py:property:: kind
      :type: str


      Returns the kind of table.


   .. py:property:: schema
      :type: pyarrow.Schema


      Returns the schema associated with this table.


